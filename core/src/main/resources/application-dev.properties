
#主数据源
first.spring.datasource.url = jdbc:mysql://172.16.4.187:3306/microservice?useUnicode=true&characterEncoding=utf-8&useSSL=false
first.spring.datasource.username = root
first.spring.datasource.password =password
first.spring.datasource.driver-class-name = com.mysql.jdbc.Driver
first.spring.datasource.type=com.alibaba.druid.pool.DruidDataSource

# 下面为连接池的补充设置，应用到上面所有数据源中
# 初始化大小，最小，最大
first.spring.datasource.initialSize=5
#最小空闲连接数
first.spring.datasource.minIdle=2
first.spring.datasource.maxActive=20
# 等待超时的时间，单位毫秒
first.spring.datasource.maxWait=20000
#dbserver有闲置连接的超时时间。所以在使用长时间空闲连接之前，进行ping操作，确保是有效的连接
#first.spring.datasource.poolPingEnabled=true
#first.spring.datasource.poolPingQuery=select 1 from dual
#闲置时间超过某个时间的连接，进行ping,单位毫秒
#first.spring.datasource.poolPingConnectionsNotUsedFor=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
first.spring.datasource.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
first.spring.datasource.minEvictableIdleTimeMillis=300000
#检查连接是否有效，申请连接的时候检查空闲连接
first.spring.datasource.validationQuery=SELECT 1 FROM DUAL
first.spring.datasource.testWhileIdle=true
first.spring.datasource.testOnBorrow=false
first.spring.datasource.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小
first.spring.datasource.poolPreparedStatements=true
first.spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
first.spring.datasource.filters=stat,wall,log4j
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
first.spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 合并多个DruidDataSource的监控数据
#spring.datasource.useGlobalDataSourceStat=true



#第二数据源
#second.spring.datasource.url = jdbc:oracle:thin:@192.168.84.235:1521:x64devdb
#second.spring.datasource.username = itfw_app
#second.spring.datasource.password = itiu0pk
#second.spring.datasource.driver-class-name = oracle.jdbc.OracleDriver
#second.spring.datasource.type=com.alibaba.druid.pool.DruidDataSource


#redis客户端redisson配置
spring.redisson.nodeAddresses[0]=redis://172.16.4.187:6000
spring.redisson.nodeAddresses[1]=redis://172.16.4.187:6001
spring.redisson.nodeAddresses[2]=redis://172.16.4.187:6002
spring.redisson.nodeAddresses[3]=redis://172.16.4.187:6003
spring.redisson.nodeAddresses[4]=redis://172.16.4.187:6004
spring.redisson.nodeAddresses[5]=redis://172.16.4.187:6005
#redis集群密码，默认为空
#spring.redisson.password=123
spring.redisson.readMode=MASTER_SLAVE
#连接空闲超时
spring.redisson.idleConnectionTimeout=20000
#重试次数
spring.redisson.retryAttempts=3
spring.redisson.slaveConnectionMinimumIdleSize=30
spring.redisson.masterConnectionMinimumIdleSize=30
spring.redisson.maxConnectionSize=300

#rocketmq配置
#spring.rocketmq.producer.nameServer=10.42.242.189:9876
spring.rocketmq.producer.nameServer=172.16.4.187:9876
#各自设置生产者组
spring.rocketmq.producer.group=my-group
spring.rocketmq.producer.instanceName=microservice

spring.rocketmq.producer.sendMsgTimeout=3000
spring.rocketmq.producer.compressMsgBodyOverHowmuch=4096
spring.rocketmq.producer.maxMessageSize=4194304
spring.rocketmq.producer.retryAnotherBrokerWhenNotStoreOk=true
spring.rocketmq.producer.retryTimesWhenSendFailed=3
spring.rocketmq.producer.retryTimesWhenSendAsyncFailed=3

#各自设置消费者组
spring.rocketmq.producer.pushConsumerGroup=push-consumer-group1
spring.rocketmq.producer.pullConsumerGroup=pull-consumer-group1




#ribbon
# hystrix的超时时间必须大于ribbon的超时时间
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=5000
# 开启重试
spring.cloud.loadbalancer.retry.enabled=true
# 请求连接的超时时间
ribbon.ConnectTimeout=1000
# 请求处理的超时时间
ribbon.ReadTimeout=10000
# 对所有操作请求都进行重试
ribbon.OkToRetryOnAllOperations=true
#最多重试多少台服务器
ribbon.MaxAutoRetriesNextServer=3
#每台服务器最多重试次数，但是首次调用不包括在内
ribbon.MaxAutoRetries=1
ribbon.httpclient.enabled=false
ribbon.okhttp.enabled=true
ribbon.client.name=dslf

ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.WeightedResponseTimeRule
#KAFKA
com.zipkin.kafkaHosts=11.4.74.45:9092,11.4.74.47:9092,11.4.74.50:9092
com.zipkin.topic=zipkin
com.zipkin.serviceName=${spring.application.name}
com.zipkin.linger.ms=50
com.zipkin.acks=1
servlet
threadpool.corepoolsize=4
threadpool.maxpoolsize=2000

#sql日志打印
logging.level.com.xmair.core.mapper.framedb = debug
logging.level.com.xmair.core.mapper.test1 = debug
